{"version":3,"file":"parchment.js","sources":["../src/scope.ts","../src/attributor/attributor.ts","../src/error.ts","../src/registry.ts","../src/attributor/class.ts","../src/attributor/style.ts","../src/attributor/store.ts","../src/blot/abstract/shadow.ts","../src/blot/abstract/leaf.ts","../src/collection/linked-list.ts","../src/blot/abstract/parent.ts","../src/blot/inline.ts","../src/blot/block.ts","../src/blot/abstract/container.ts","../src/blot/embed.ts","../src/blot/scroll.ts","../src/blot/text.ts"],"sourcesContent":["enum Scope {\r\n  TYPE = (1 << 2) - 1, // 0011 Lower two bits\r\n  LEVEL = ((1 << 2) - 1) << 2, // 1100 Higher two bits\r\n\r\n  ATTRIBUTE = (1 << 0) | LEVEL, // 1101\r\n  BLOT = (1 << 1) | LEVEL, // 1110\r\n  INLINE = (1 << 2) | TYPE, // 0111\r\n  BLOCK = (1 << 3) | TYPE, // 1011\r\n\r\n  BLOCK_BLOT = BLOCK & BLOT, // 1010\r\n  INLINE_BLOT = INLINE & BLOT, // 0110\r\n  BLOCK_ATTRIBUTE = BLOCK & ATTRIBUTE, // 1001\r\n  INLINE_ATTRIBUTE = INLINE & ATTRIBUTE, // 0101\r\n\r\n  ANY = TYPE | LEVEL,\r\n}\r\n\r\nexport default Scope;\r\n","import Scope from '../scope.js';\r\n\r\nexport interface AttributorOptions {\r\n  scope?: Scope;\r\n  whitelist?: string[];\r\n}\r\n\r\nexport default class Attributor {\r\n  public static keys(node: HTMLElement): string[] {\r\n    return Array.from(node.attributes).map((item: Attr) => item.name);\r\n  }\r\n\r\n  public scope: Scope;\r\n  public whitelist: string[] | undefined;\r\n\r\n  constructor(\r\n    public readonly attrName: string,\r\n    public readonly keyName: string,\r\n    options: AttributorOptions = {},\r\n  ) {\r\n    const attributeBit = Scope.TYPE & Scope.ATTRIBUTE;\r\n    this.scope =\r\n      options.scope != null\r\n        ? // Ignore type bits, force attribute bit\r\n          (options.scope & Scope.LEVEL) | attributeBit\r\n        : Scope.ATTRIBUTE;\r\n    if (options.whitelist != null) {\r\n      this.whitelist = options.whitelist;\r\n    }\r\n  }\r\n\r\n  public add(node: HTMLElement, value: any): boolean {\r\n    if (!this.canAdd(node, value)) {\r\n      return false;\r\n    }\r\n    node.setAttribute(this.keyName, value);\r\n    return true;\r\n  }\r\n\r\n  public canAdd(_node: HTMLElement, value: any): boolean {\r\n    if (this.whitelist == null) {\r\n      return true;\r\n    }\r\n    if (typeof value === 'string') {\r\n      return this.whitelist.indexOf(value.replace(/[\"']/g, '')) > -1;\r\n    } else {\r\n      return this.whitelist.indexOf(value) > -1;\r\n    }\r\n  }\r\n\r\n  public remove(node: HTMLElement): void {\r\n    node.removeAttribute(this.keyName);\r\n  }\r\n\r\n  public value(node: HTMLElement): any {\r\n    const value = node.getAttribute(this.keyName);\r\n    if (this.canAdd(node, value) && value) {\r\n      return value;\r\n    }\r\n    return '';\r\n  }\r\n}\r\n","export default class ParchmentError extends Error {\r\n  public message: string;\r\n  public name: string;\r\n  public stack!: string;\r\n\r\n  constructor(message: string) {\r\n    message = '[Parchment] ' + message;\r\n    super(message);\r\n    this.message = message;\r\n    this.name = this.constructor.name;\r\n  }\r\n}\r\n","import Attributor from './attributor/attributor.js';\r\nimport {\r\n  type Blot,\r\n  type BlotConstructor,\r\n  type Root,\r\n} from './blot/abstract/blot.js';\r\nimport ParchmentError from './error.js';\r\nimport Scope from './scope.js';\r\n\r\nexport type RegistryDefinition = Attributor | BlotConstructor;\r\n\r\nexport interface RegistryInterface {\r\n  create(scroll: Root, input: Node | string | Scope, value?: any): Blot;\r\n  query(query: string | Node | Scope, scope: Scope): RegistryDefinition | null;\r\n  register(...definitions: any[]): any;\r\n}\r\n\r\nexport default class Registry implements RegistryInterface {\r\n  public static blots = new WeakMap<Node, Blot>();\r\n\r\n  public static find(node?: Node | null, bubble = false): Blot | null {\r\n    if (node == null) {\r\n      return null;\r\n    }\r\n    if (this.blots.has(node)) {\r\n      return this.blots.get(node) || null;\r\n    }\r\n    if (bubble) {\r\n      let parentNode: Node | null = null;\r\n      try {\r\n        parentNode = node.parentNode;\r\n      } catch (err) {\r\n        // Probably hit a permission denied error.\r\n        // A known case is in Firefox, event targets can be anonymous DIVs\r\n        // inside an input element.\r\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=208427\r\n        return null;\r\n      }\r\n      return this.find(parentNode, bubble);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private attributes: { [key: string]: Attributor } = {};\r\n  private classes: { [key: string]: BlotConstructor } = {};\r\n  private tags: { [key: string]: BlotConstructor } = {};\r\n  private types: { [key: string]: RegistryDefinition } = {};\r\n\r\n  public create(scroll: Root, input: Node | string | Scope, value?: any): Blot {\r\n    const match = this.query(input);\r\n    if (match == null) {\r\n      throw new ParchmentError(`Unable to create ${input} blot`);\r\n    }\r\n    const blotClass = match as BlotConstructor;\r\n    const node =\r\n      // @ts-expect-error Fix me later\r\n      input instanceof Node || input.nodeType === Node.TEXT_NODE\r\n        ? input\r\n        : blotClass.create(value);\r\n\r\n    const blot = new blotClass(scroll, node as Node, value);\r\n    Registry.blots.set(blot.domNode, blot);\r\n    return blot;\r\n  }\r\n\r\n  public find(node: Node | null, bubble = false): Blot | null {\r\n    return Registry.find(node, bubble);\r\n  }\r\n\r\n  public query(\r\n    query: string | Node | Scope,\r\n    scope: Scope = Scope.ANY,\r\n  ): RegistryDefinition | null {\r\n    let match;\r\n    if (typeof query === 'string') {\r\n      match = this.types[query] || this.attributes[query];\r\n      // @ts-expect-error Fix me later\r\n    } else if (query instanceof Text || query.nodeType === Node.TEXT_NODE) {\r\n      match = this.types.text;\r\n    } else if (typeof query === 'number') {\r\n      if (query & Scope.LEVEL & Scope.BLOCK) {\r\n        match = this.types.block;\r\n      } else if (query & Scope.LEVEL & Scope.INLINE) {\r\n        match = this.types.inline;\r\n      }\r\n    } else if (query instanceof Element) {\r\n      const names = (query.getAttribute('class') || '').split(/\\s+/);\r\n      names.some((name) => {\r\n        match = this.classes[name];\r\n        if (match) {\r\n          return true;\r\n        }\r\n        return false;\r\n      });\r\n      match = match || this.tags[query.tagName];\r\n    }\r\n    if (match == null) {\r\n      return null;\r\n    }\r\n    if (\r\n      'scope' in match &&\r\n      scope & Scope.LEVEL & match.scope &&\r\n      scope & Scope.TYPE & match.scope\r\n    ) {\r\n      return match;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public register(...definitions: RegistryDefinition[]): RegistryDefinition[] {\r\n    return definitions.map((definition) => {\r\n      const isBlot = 'blotName' in definition;\r\n      const isAttr = 'attrName' in definition;\r\n      if (!isBlot && !isAttr) {\r\n        throw new ParchmentError('Invalid definition');\r\n      } else if (isBlot && definition.blotName === 'abstract') {\r\n        throw new ParchmentError('Cannot register abstract class');\r\n      }\r\n      const key = isBlot\r\n        ? definition.blotName\r\n        : isAttr\r\n          ? definition.attrName\r\n          : (undefined as never); // already handled by above checks\r\n      this.types[key] = definition;\r\n\r\n      if (isAttr) {\r\n        if (typeof definition.keyName === 'string') {\r\n          this.attributes[definition.keyName] = definition;\r\n        }\r\n      } else if (isBlot) {\r\n        if (definition.className) {\r\n          this.classes[definition.className] = definition;\r\n        }\r\n        if (definition.tagName) {\r\n          if (Array.isArray(definition.tagName)) {\r\n            definition.tagName = definition.tagName.map((tagName: string) => {\r\n              return tagName.toUpperCase();\r\n            });\r\n          } else {\r\n            definition.tagName = definition.tagName.toUpperCase();\r\n          }\r\n          const tagNames = Array.isArray(definition.tagName)\r\n            ? definition.tagName\r\n            : [definition.tagName];\r\n          tagNames.forEach((tag: string) => {\r\n            if (this.tags[tag] == null || definition.className == null) {\r\n              this.tags[tag] = definition;\r\n            }\r\n          });\r\n        }\r\n      }\r\n      return definition;\r\n    });\r\n  }\r\n}\r\n","import Attributor from './attributor.js';\r\n\r\nfunction match(node: HTMLElement, prefix: string): string[] {\r\n  const className = node.getAttribute('class') || '';\r\n  return className\r\n    .split(/\\s+/)\r\n    .filter((name) => name.indexOf(`${prefix}-`) === 0);\r\n}\r\n\r\nclass ClassAttributor extends Attributor {\r\n  public static keys(node: HTMLElement): string[] {\r\n    return (node.getAttribute('class') || '')\r\n      .split(/\\s+/)\r\n      .map((name) => name.split('-').slice(0, -1).join('-'));\r\n  }\r\n\r\n  public add(node: HTMLElement, value: any): boolean {\r\n    if (!this.canAdd(node, value)) {\r\n      return false;\r\n    }\r\n    this.remove(node);\r\n    node.classList.add(`${this.keyName}-${value}`);\r\n    return true;\r\n  }\r\n\r\n  public remove(node: HTMLElement): void {\r\n    const matches = match(node, this.keyName);\r\n    matches.forEach((name) => {\r\n      node.classList.remove(name);\r\n    });\r\n    if (node.classList.length === 0) {\r\n      node.removeAttribute('class');\r\n    }\r\n  }\r\n\r\n  public value(node: HTMLElement): any {\r\n    const result = match(node, this.keyName)[0] || '';\r\n    const value = result.slice(this.keyName.length + 1); // +1 for hyphen\r\n    return this.canAdd(node, value) ? value : '';\r\n  }\r\n}\r\n\r\nexport default ClassAttributor;\r\n","import Attributor from './attributor.js';\r\n\r\nfunction camelize(name: string): string {\r\n  const parts = name.split('-');\r\n  const rest = parts\r\n    .slice(1)\r\n    .map((part: string) => part[0].toUpperCase() + part.slice(1))\r\n    .join('');\r\n  return parts[0] + rest;\r\n}\r\n\r\nclass StyleAttributor extends Attributor {\r\n  public static keys(node: HTMLElement): string[] {\r\n    return (node.getAttribute('style') || '').split(';').map((value) => {\r\n      const arr = value.split(':');\r\n      return arr[0].trim();\r\n    });\r\n  }\r\n\r\n  public add(node: HTMLElement, value: any): boolean {\r\n    if (!this.canAdd(node, value)) {\r\n      return false;\r\n    }\r\n    // @ts-expect-error Fix me later\r\n    node.style[camelize(this.keyName)] = value;\r\n    return true;\r\n  }\r\n\r\n  public remove(node: HTMLElement): void {\r\n    // @ts-expect-error Fix me later\r\n    node.style[camelize(this.keyName)] = '';\r\n    if (!node.getAttribute('style')) {\r\n      node.removeAttribute('style');\r\n    }\r\n  }\r\n\r\n  public value(node: HTMLElement): any {\r\n    // @ts-expect-error Fix me later\r\n    const value = node.style[camelize(this.keyName)];\r\n    return this.canAdd(node, value) ? value : '';\r\n  }\r\n}\r\n\r\nexport default StyleAttributor;\r\n","import type { Formattable } from '../blot/abstract/blot.js';\r\nimport Registry from '../registry.js';\r\nimport Scope from '../scope.js';\r\nimport Attributor from './attributor.js';\r\nimport ClassAttributor from './class.js';\r\nimport StyleAttributor from './style.js';\r\n\r\nclass AttributorStore {\r\n  private attributes: { [key: string]: Attributor } = {};\r\n  private domNode: HTMLElement;\r\n\r\n  constructor(domNode: HTMLElement) {\r\n    this.domNode = domNode;\r\n    this.build();\r\n  }\r\n\r\n  public attribute(attribute: Attributor, value: any): void {\r\n    // verb\r\n    if (value) {\r\n      if (attribute.add(this.domNode, value)) {\r\n        if (attribute.value(this.domNode) != null) {\r\n          this.attributes[attribute.attrName] = attribute;\r\n        } else {\r\n          delete this.attributes[attribute.attrName];\r\n        }\r\n      }\r\n    } else {\r\n      attribute.remove(this.domNode);\r\n      delete this.attributes[attribute.attrName];\r\n    }\r\n  }\r\n\r\n  public build(): void {\r\n    this.attributes = {};\r\n    const blot = Registry.find(this.domNode);\r\n    if (blot == null) {\r\n      return;\r\n    }\r\n    const attributes = Attributor.keys(this.domNode);\r\n    const classes = ClassAttributor.keys(this.domNode);\r\n    const styles = StyleAttributor.keys(this.domNode);\r\n    attributes\r\n      .concat(classes)\r\n      .concat(styles)\r\n      .forEach((name) => {\r\n        const attr = blot.scroll.query(name, Scope.ATTRIBUTE);\r\n        if (attr instanceof Attributor) {\r\n          this.attributes[attr.attrName] = attr;\r\n        }\r\n      });\r\n  }\r\n\r\n  public copy(target: Formattable): void {\r\n    Object.keys(this.attributes).forEach((key) => {\r\n      const value = this.attributes[key].value(this.domNode);\r\n      target.format(key, value);\r\n    });\r\n  }\r\n\r\n  public move(target: Formattable): void {\r\n    this.copy(target);\r\n    Object.keys(this.attributes).forEach((key) => {\r\n      this.attributes[key].remove(this.domNode);\r\n    });\r\n    this.attributes = {};\r\n  }\r\n\r\n  public values(): { [key: string]: any } {\r\n    return Object.keys(this.attributes).reduce(\r\n      (attributes: { [key: string]: any }, name: string) => {\r\n        attributes[name] = this.attributes[name].value(this.domNode);\r\n        return attributes;\r\n      },\r\n      {},\r\n    );\r\n  }\r\n}\r\n\r\nexport default AttributorStore;\r\n","import ParchmentError from '../../error.js';\r\nimport Registry from '../../registry.js';\r\nimport Scope from '../../scope.js';\r\nimport type {\r\n  Blot,\r\n  BlotConstructor,\r\n  Formattable,\r\n  Parent,\r\n  Root,\r\n} from './blot.js';\r\n\r\nclass ShadowBlot implements Blot {\r\n  public static blotName = 'abstract';\r\n  public static className: string;\r\n  public static requiredContainer: BlotConstructor;\r\n  public static scope: Scope;\r\n  public static tagName: string | string[];\r\n\r\n  public static create(rawValue?: unknown): Node {\r\n    if (this.tagName == null) {\r\n      throw new ParchmentError('Blot definition missing tagName');\r\n    }\r\n    let node: HTMLElement;\r\n    let value: string | number | undefined;\r\n    if (Array.isArray(this.tagName)) {\r\n      if (typeof rawValue === 'string') {\r\n        value = rawValue.toUpperCase();\r\n        if (parseInt(value, 10).toString() === value) {\r\n          value = parseInt(value, 10);\r\n        }\r\n      } else if (typeof rawValue === 'number') {\r\n        value = rawValue;\r\n      }\r\n      if (typeof value === 'number') {\r\n        node = document.createElement(this.tagName[value - 1]);\r\n      } else if (value && this.tagName.indexOf(value) > -1) {\r\n        node = document.createElement(value);\r\n      } else {\r\n        node = document.createElement(this.tagName[0]);\r\n      }\r\n    } else {\r\n      node = document.createElement(this.tagName);\r\n    }\r\n    if (this.className) {\r\n      node.classList.add(this.className);\r\n    }\r\n    return node;\r\n  }\r\n\r\n  public prev: Blot | null;\r\n  public next: Blot | null;\r\n  // @ts-expect-error Fix me later\r\n  public parent: Parent;\r\n\r\n  // Hack for accessing inherited static methods\r\n  get statics(): any {\r\n    return this.constructor;\r\n  }\r\n  constructor(\r\n    public scroll: Root,\r\n    public domNode: Node,\r\n  ) {\r\n    Registry.blots.set(domNode, this);\r\n    this.prev = null;\r\n    this.next = null;\r\n  }\r\n\r\n  public attach(): void {\r\n    // Nothing to do\r\n  }\r\n\r\n  public clone(): Blot {\r\n    const domNode = this.domNode.cloneNode(false);\r\n    return this.scroll.create(domNode);\r\n  }\r\n\r\n  public detach(): void {\r\n    if (this.parent != null) {\r\n      this.parent.removeChild(this);\r\n    }\r\n    Registry.blots.delete(this.domNode);\r\n  }\r\n\r\n  public deleteAt(index: number, length: number): void {\r\n    const blot = this.isolate(index, length);\r\n    blot.remove();\r\n  }\r\n\r\n  public formatAt(\r\n    index: number,\r\n    length: number,\r\n    name: string,\r\n    value: any,\r\n  ): void {\r\n    const blot = this.isolate(index, length);\r\n    if (this.scroll.query(name, Scope.BLOT) != null && value) {\r\n      blot.wrap(name, value);\r\n    } else if (this.scroll.query(name, Scope.ATTRIBUTE) != null) {\r\n      const parent = this.scroll.create(this.statics.scope) as Parent &\r\n        Formattable;\r\n      blot.wrap(parent);\r\n      parent.format(name, value);\r\n    }\r\n  }\r\n\r\n  public insertAt(index: number, value: string, def?: any): void {\r\n    const blot =\r\n      def == null\r\n        ? this.scroll.create('text', value)\r\n        : this.scroll.create(value, def);\r\n    const ref = this.split(index);\r\n    this.parent.insertBefore(blot, ref || undefined);\r\n  }\r\n\r\n  public isolate(index: number, length: number): Blot {\r\n    const target = this.split(index);\r\n    if (target == null) {\r\n      throw new Error('Attempt to isolate at end');\r\n    }\r\n    target.split(length);\r\n    return target;\r\n  }\r\n\r\n  public length(): number {\r\n    return 1;\r\n  }\r\n\r\n  public offset(root: Blot = this.parent): number {\r\n    if (this.parent == null || this === root) {\r\n      return 0;\r\n    }\r\n    return this.parent.children.offset(this) + this.parent.offset(root);\r\n  }\r\n\r\n  public optimize(_context?: { [key: string]: any }): void {\r\n    if (\r\n      this.statics.requiredContainer &&\r\n      !(this.parent instanceof this.statics.requiredContainer)\r\n    ) {\r\n      this.wrap(this.statics.requiredContainer.blotName);\r\n    }\r\n  }\r\n\r\n  public remove(): void {\r\n    if (this.domNode.parentNode != null) {\r\n      this.domNode.parentNode.removeChild(this.domNode);\r\n    }\r\n    this.detach();\r\n  }\r\n\r\n  public replaceWith(name: string | Blot, value?: any): Blot {\r\n    const replacement =\r\n      typeof name === 'string' ? this.scroll.create(name, value) : name;\r\n    if (this.parent != null) {\r\n      this.parent.insertBefore(replacement, this.next || undefined);\r\n      this.remove();\r\n    }\r\n    return replacement;\r\n  }\r\n\r\n  public split(index: number, _force?: boolean): Blot | null {\r\n    return index === 0 ? this : this.next;\r\n  }\r\n\r\n  public update(\r\n    _mutations: MutationRecord[],\r\n    _context: { [key: string]: any },\r\n  ): void {\r\n    // Nothing to do by default\r\n  }\r\n\r\n  public wrap(name: string | Parent, value?: any): Parent {\r\n    const wrapper =\r\n      typeof name === 'string'\r\n        ? (this.scroll.create(name, value) as Parent)\r\n        : name;\r\n    if (this.parent != null) {\r\n      this.parent.insertBefore(wrapper, this.next || undefined);\r\n    }\r\n    if (typeof wrapper.appendChild !== 'function') {\r\n      throw new ParchmentError(`Cannot wrap ${name}`);\r\n    }\r\n    wrapper.appendChild(this);\r\n    return wrapper;\r\n  }\r\n}\r\n\r\nexport default ShadowBlot;\r\n","import Scope from '../../scope.js';\r\nimport type { Leaf } from './blot.js';\r\nimport ShadowBlot from './shadow.js';\r\n\r\nclass LeafBlot extends ShadowBlot implements Leaf {\r\n  public static scope = Scope.INLINE_BLOT;\r\n\r\n  /**\r\n   * Returns the value represented by domNode if it is this Blot's type\r\n   * No checking that domNode can represent this Blot type is required so\r\n   * applications needing it should check externally before calling.\r\n   */\r\n  public static value(_domNode: Node): any {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Given location represented by node and offset from DOM Selection Range,\r\n   * return index to that location.\r\n   */\r\n  public index(node: Node, offset: number): number {\r\n    if (\r\n      this.domNode === node ||\r\n      this.domNode.compareDocumentPosition(node) &\r\n        Node.DOCUMENT_POSITION_CONTAINED_BY\r\n    ) {\r\n      return Math.min(offset, 1);\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * Given index to location within blot, return node and offset representing\r\n   * that location, consumable by DOM Selection Range\r\n   */\r\n  public position(index: number, _inclusive?: boolean): [Node, number] {\r\n    const childNodes: Node[] = Array.from(this.parent.domNode.childNodes);\r\n    let offset = childNodes.indexOf(this.domNode);\r\n    if (index > 0) {\r\n      offset += 1;\r\n    }\r\n    return [this.parent.domNode, offset];\r\n  }\r\n\r\n  /**\r\n   * Return value represented by this blot\r\n   * Should not change without interaction from API or\r\n   * user change detectable by update()\r\n   */\r\n  public value(): any {\r\n    return {\r\n      [this.statics.blotName]: this.statics.value(this.domNode) || true,\r\n    };\r\n  }\r\n}\r\n\r\nexport default LeafBlot;\r\n","import type LinkedNode from './linked-node.js';\r\n\r\nclass LinkedList<T extends LinkedNode> {\r\n  public head: T | null;\r\n  public tail: T | null;\r\n  public length: number;\r\n\r\n  constructor() {\r\n    this.head = null;\r\n    this.tail = null;\r\n    this.length = 0;\r\n  }\r\n\r\n  public append(...nodes: T[]): void {\r\n    this.insertBefore(nodes[0], null);\r\n    if (nodes.length > 1) {\r\n      const rest = nodes.slice(1);\r\n      this.append(...rest);\r\n    }\r\n  }\r\n\r\n  public at(index: number): T | null {\r\n    const next = this.iterator();\r\n    let cur = next();\r\n    while (cur && index > 0) {\r\n      index -= 1;\r\n      cur = next();\r\n    }\r\n    return cur;\r\n  }\r\n\r\n  public contains(node: T): boolean {\r\n    const next = this.iterator();\r\n    let cur = next();\r\n    while (cur) {\r\n      if (cur === node) {\r\n        return true;\r\n      }\r\n      cur = next();\r\n    }\r\n    return false;\r\n  }\r\n\r\n  public indexOf(node: T): number {\r\n    const next = this.iterator();\r\n    let cur = next();\r\n    let index = 0;\r\n    while (cur) {\r\n      if (cur === node) {\r\n        return index;\r\n      }\r\n      index += 1;\r\n      cur = next();\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  public insertBefore(node: T | null, refNode: T | null): void {\r\n    if (node == null) {\r\n      return;\r\n    }\r\n    this.remove(node);\r\n    node.next = refNode;\r\n    if (refNode != null) {\r\n      node.prev = refNode.prev;\r\n      if (refNode.prev != null) {\r\n        refNode.prev.next = node;\r\n      }\r\n      refNode.prev = node;\r\n      if (refNode === this.head) {\r\n        this.head = node;\r\n      }\r\n    } else if (this.tail != null) {\r\n      this.tail.next = node;\r\n      node.prev = this.tail;\r\n      this.tail = node;\r\n    } else {\r\n      node.prev = null;\r\n      this.head = this.tail = node;\r\n    }\r\n    this.length += 1;\r\n  }\r\n\r\n  public offset(target: T): number {\r\n    let index = 0;\r\n    let cur = this.head;\r\n    while (cur != null) {\r\n      if (cur === target) {\r\n        return index;\r\n      }\r\n      index += cur.length();\r\n      cur = cur.next as T;\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  public remove(node: T): void {\r\n    if (!this.contains(node)) {\r\n      return;\r\n    }\r\n    if (node.prev != null) {\r\n      node.prev.next = node.next;\r\n    }\r\n    if (node.next != null) {\r\n      node.next.prev = node.prev;\r\n    }\r\n    if (node === this.head) {\r\n      this.head = node.next as T;\r\n    }\r\n    if (node === this.tail) {\r\n      this.tail = node.prev as T;\r\n    }\r\n    this.length -= 1;\r\n  }\r\n\r\n  public iterator(curNode: T | null = this.head): () => T | null {\r\n    // TODO use yield when we can\r\n    return (): T | null => {\r\n      const ret = curNode;\r\n      if (curNode != null) {\r\n        curNode = curNode.next as T;\r\n      }\r\n      return ret;\r\n    };\r\n  }\r\n\r\n  public find(index: number, inclusive = false): [T | null, number] {\r\n    const next = this.iterator();\r\n    let cur = next();\r\n    while (cur) {\r\n      const length = cur.length();\r\n      if (\r\n        index < length ||\r\n        (inclusive &&\r\n          index === length &&\r\n          (cur.next == null || cur.next.length() !== 0))\r\n      ) {\r\n        return [cur, index];\r\n      }\r\n      index -= length;\r\n      cur = next();\r\n    }\r\n    return [null, 0];\r\n  }\r\n\r\n  public forEach(callback: (cur: T) => void): void {\r\n    const next = this.iterator();\r\n    let cur = next();\r\n    while (cur) {\r\n      callback(cur);\r\n      cur = next();\r\n    }\r\n  }\r\n\r\n  public forEachAt(\r\n    index: number,\r\n    length: number,\r\n    callback: (cur: T, offset: number, length: number) => void,\r\n  ): void {\r\n    if (length <= 0) {\r\n      return;\r\n    }\r\n    const [startNode, offset] = this.find(index);\r\n    let curIndex = index - offset;\r\n    const next = this.iterator(startNode);\r\n    let cur = next();\r\n    while (cur && curIndex < index + length) {\r\n      const curLength = cur.length();\r\n      if (index > curIndex) {\r\n        callback(\r\n          cur,\r\n          index - curIndex,\r\n          Math.min(length, curIndex + curLength - index),\r\n        );\r\n      } else {\r\n        callback(cur, 0, Math.min(curLength, index + length - curIndex));\r\n      }\r\n      curIndex += curLength;\r\n      cur = next();\r\n    }\r\n  }\r\n\r\n  public map(callback: (cur: T) => any): any[] {\r\n    return this.reduce((memo: T[], cur: T) => {\r\n      memo.push(callback(cur));\r\n      return memo;\r\n    }, []);\r\n  }\r\n\r\n  public reduce<M>(callback: (memo: M, cur: T) => M, memo: M): M {\r\n    const next = this.iterator();\r\n    let cur = next();\r\n    while (cur) {\r\n      memo = callback(memo, cur);\r\n      cur = next();\r\n    }\r\n    return memo;\r\n  }\r\n}\r\n\r\nexport default LinkedList;\r\n","import LinkedList from '../../collection/linked-list.js';\nimport ParchmentError from '../../error.js';\nimport Scope from '../../scope.js';\nimport type { Blot, BlotConstructor, Parent, Root } from './blot.js';\nimport ShadowBlot from './shadow.js';\n\nfunction makeAttachedBlot(node: Node, scroll: Root): Blot {\n  const found = scroll.find(node);\n  if (found) return found;\n  try {\n    return scroll.create(node);\n  } catch (e) {\n    const blot = scroll.create(Scope.INLINE);\n    Array.from(node.childNodes).forEach((child: Node) => {\n      blot.domNode.appendChild(child);\n    });\n    if (node.parentNode) {\n      node.parentNode.replaceChild(blot.domNode, node);\n    }\n    blot.attach();\n    return blot;\n  }\n}\n\nclass ParentBlot extends ShadowBlot implements Parent {\n  /**\n   * Whitelist array of Blots that can be direct children.\n   */\n  public static allowedChildren?: BlotConstructor[];\n\n  /**\n   * Default child blot to be inserted if this blot becomes empty.\n   */\n  public static defaultChild?: BlotConstructor;\n  public static uiClass = '';\n\n  public children!: LinkedList<Blot>;\n  public domNode!: HTMLElement;\n  public uiNode: HTMLElement | null = null;\n\n  constructor(scroll: Root, domNode: Node) {\n    super(scroll, domNode);\n    this.build();\n  }\n\n  public appendChild(other: Blot): void {\n    this.insertBefore(other);\n  }\n\n  public attach(): void {\n    super.attach();\n    this.children.forEach((child) => {\n      child.attach();\n    });\n  }\n\n  public attachUI(node: HTMLElement): void {\n    if (this.uiNode != null) {\n      this.uiNode.remove();\n    }\n    this.uiNode = node;\n    if (ParentBlot.uiClass) {\n      this.uiNode.classList.add(ParentBlot.uiClass);\n    }\n    this.uiNode.setAttribute('contenteditable', 'false');\n    this.domNode.insertBefore(this.uiNode, this.domNode.firstChild);\n  }\n\n  /**\n   * Called during construction, should fill its own children LinkedList.\n   */\n  public build(): void {\n    this.children = new LinkedList<Blot>();\n    // Need to be reversed for if DOM nodes already in order\n    Array.from(this.domNode.childNodes)\n      .filter((node: Node) => node !== this.uiNode)\n      .reverse()\n      .forEach((node: Node) => {\n        try {\n          const child = makeAttachedBlot(node, this.scroll);\n          this.insertBefore(child, this.children.head || undefined);\n        } catch (err) {\n          if (err instanceof ParchmentError) {\n            return;\n          } else {\n            throw err;\n          }\n        }\n      });\n  }\n\n  public deleteAt(index: number, length: number): void {\n    if (index === 0 && length === this.length()) {\n      return this.remove();\n    }\n    this.children.forEachAt(index, length, (child, offset, childLength) => {\n      child.deleteAt(offset, childLength);\n    });\n  }\n\n  public descendant<T extends Blot>(\n    criteria: new (...args: any[]) => T,\n    index: number,\n  ): [T | null, number];\n  public descendant(\n    criteria: (blot: Blot) => boolean,\n    index: number,\n  ): [Blot | null, number];\n  public descendant(criteria: any, index = 0): [Blot | null, number] {\n    const [child, offset] = this.children.find(index);\n    if (\n      (criteria.blotName == null && criteria(child)) ||\n      (criteria.blotName != null && child instanceof criteria)\n    ) {\n      return [child as any, offset];\n    } else if (child instanceof ParentBlot) {\n      return child.descendant(criteria, offset);\n    } else {\n      return [null, -1];\n    }\n  }\n\n  public descendants<T extends Blot>(\n    criteria: new (...args: any[]) => T,\n    index?: number,\n    length?: number,\n  ): T[];\n  public descendants(\n    criteria: (blot: Blot) => boolean,\n    index?: number,\n    length?: number,\n  ): Blot[];\n  public descendants(\n    criteria: any,\n    index = 0,\n    length: number = Number.MAX_VALUE,\n  ): Blot[] {\n    let descendants: Blot[] = [];\n    let lengthLeft = length;\n    this.children.forEachAt(\n      index,\n      length,\n      (child: Blot, childIndex: number, childLength: number) => {\n        if (\n          (criteria.blotName == null && criteria(child)) ||\n          (criteria.blotName != null && child instanceof criteria)\n        ) {\n          descendants.push(child);\n        }\n        if (child instanceof ParentBlot) {\n          descendants = descendants.concat(\n            child.descendants(criteria, childIndex, lengthLeft),\n          );\n        }\n        lengthLeft -= childLength;\n      },\n    );\n    return descendants;\n  }\n\n  public detach(): void {\n    this.children.forEach((child) => {\n      child.detach();\n    });\n    super.detach();\n  }\n\n  public enforceAllowedChildren(): void {\n    let done = false;\n    this.children.forEach((child: Blot) => {\n      if (done) {\n        return;\n      }\n      const allowed = this.statics.allowedChildren.some(\n        (def: BlotConstructor) => child instanceof def,\n      );\n      if (allowed) {\n        return;\n      }\n      if (child.statics.scope === Scope.BLOCK_BLOT) {\n        if (child.next != null) {\n          this.splitAfter(child);\n        }\n        if (child.prev != null) {\n          this.splitAfter(child.prev);\n        }\n        child.parent.unwrap();\n        done = true;\n      } else if (child instanceof ParentBlot) {\n        child.unwrap();\n      } else {\n        child.remove();\n      }\n    });\n  }\n\n  public formatAt(\n    index: number,\n    length: number,\n    name: string,\n    value: any,\n  ): void {\n    this.children.forEachAt(index, length, (child, offset, childLength) => {\n      child.formatAt(offset, childLength, name, value);\n    });\n  }\n\n  public insertAt(index: number, value: string, def?: any): void {\n    const [child, offset] = this.children.find(index);\n    if (child) {\n      child.insertAt(offset, value, def);\n    } else {\n      const blot =\n        def == null\n          ? this.scroll.create('text', value)\n          : this.scroll.create(value, def);\n      this.appendChild(blot);\n    }\n  }\n\n  public insertBefore(childBlot: Blot, refBlot?: Blot | null): void {\n    if (childBlot.parent != null) {\n      childBlot.parent.children.remove(childBlot);\n    }\n    let refDomNode: Node | null = null;\n    this.children.insertBefore(childBlot, refBlot || null);\n    childBlot.parent = this;\n    if (refBlot != null) {\n      refDomNode = refBlot.domNode;\n    }\n    if (\n      this.domNode.parentNode !== childBlot.domNode ||\n      this.domNode.nextSibling !== refDomNode\n    ) {\n      this.domNode.insertBefore(childBlot.domNode, refDomNode);\n    }\n    childBlot.attach();\n  }\n\n  public length(): number {\n    return this.children.reduce((memo, child) => {\n      return memo + child.length();\n    }, 0);\n  }\n\n  public moveChildren(targetParent: Parent, refNode?: Blot): void {\n    this.children.forEach((child) => {\n      targetParent.insertBefore(child, refNode);\n    });\n  }\n\n  public optimize(context?: { [key: string]: any }): void {\n    super.optimize(context);\n    this.enforceAllowedChildren();\n    if (this.uiNode != null && this.uiNode !== this.domNode.firstChild && this.uiNode !== this.domNode.lastChild) {\n      this.domNode.insertBefore(this.uiNode, this.domNode.firstChild);\n    }\n    if (this.children.length === 0) {\n      if (this.statics.defaultChild != null) {\n        const child = this.scroll.create(this.statics.defaultChild.blotName);\n        this.appendChild(child);\n        // TODO double check if necessary\n        // child.optimize(context);\n      } else {\n        this.remove();\n      }\n    }\n  }\n\n  public path(index: number, inclusive = false): [Blot, number][] {\n    const [child, offset] = this.children.find(index, inclusive);\n    const position: [Blot, number][] = [[this, index]];\n    if (child instanceof ParentBlot) {\n      return position.concat(child.path(offset, inclusive));\n    } else if (child != null) {\n      position.push([child, offset]);\n    }\n    return position;\n  }\n\n  public removeChild(child: Blot): void {\n    this.children.remove(child);\n  }\n\n  public replaceWith(name: string | Blot, value?: any): Blot {\n    const replacement =\n      typeof name === 'string' ? this.scroll.create(name, value) : name;\n    if (replacement instanceof ParentBlot) {\n      this.moveChildren(replacement);\n    }\n    return super.replaceWith(replacement);\n  }\n\n  public split(index: number, force = false): Blot | null {\n    if (!force) {\n      if (index === 0) {\n        return this;\n      }\n      if (index === this.length()) {\n        return this.next;\n      }\n    }\n    const after = this.clone() as ParentBlot;\n    if (this.parent) {\n      this.parent.insertBefore(after, this.next || undefined);\n    }\n    this.children.forEachAt(index, this.length(), (child, offset, _length) => {\n      const split = child.split(offset, force);\n      if (split != null) {\n        after.appendChild(split);\n      }\n    });\n    return after;\n  }\n\n  public splitAfter(child: Blot): Parent {\n    const after = this.clone() as ParentBlot;\n    while (child.next != null) {\n      after.appendChild(child.next);\n    }\n    if (this.parent) {\n      this.parent.insertBefore(after, this.next || undefined);\n    }\n    return after;\n  }\n\n  public unwrap(): void {\n    if (this.parent) {\n      this.moveChildren(this.parent, this.next || undefined);\n    }\n    this.remove();\n  }\n\n  public update(\n    mutations: MutationRecord[],\n    _context: { [key: string]: any },\n  ): void {\n    const addedNodes: Node[] = [];\n    const removedNodes: Node[] = [];\n    mutations.forEach((mutation) => {\n      if (mutation.target === this.domNode && mutation.type === 'childList') {\n        addedNodes.push(...mutation.addedNodes);\n        removedNodes.push(...mutation.removedNodes);\n      }\n    });\n    removedNodes.forEach((node: Node) => {\n      // Check node has actually been removed\n      // One exception is Chrome does not immediately remove IFRAMEs\n      // from DOM but MutationRecord is correct in its reported removal\n      if (\n        node.parentNode != null &&\n        // @ts-expect-error Fix me later\n        node.tagName !== 'IFRAME' &&\n        document.body.compareDocumentPosition(node) &\n          Node.DOCUMENT_POSITION_CONTAINED_BY\n      ) {\n        return;\n      }\n      const blot = this.scroll.find(node);\n      if (blot == null) {\n        return;\n      }\n      if (\n        blot.domNode.parentNode == null ||\n        blot.domNode.parentNode === this.domNode\n      ) {\n        blot.detach();\n      }\n    });\n    addedNodes\n      .filter((node) => {\n        return node.parentNode === this.domNode && node !== this.uiNode;\n      })\n      .sort((a, b) => {\n        if (a === b) {\n          return 0;\n        }\n        if (a.compareDocumentPosition(b) & Node.DOCUMENT_POSITION_FOLLOWING) {\n          return 1;\n        }\n        return -1;\n      })\n      .forEach((node) => {\n        let refBlot: Blot | null = null;\n        if (node.nextSibling != null) {\n          refBlot = this.scroll.find(node.nextSibling);\n        }\n        const blot = makeAttachedBlot(node, this.scroll);\n        if (blot.next !== refBlot || blot.next == null) {\n          if (blot.parent != null) {\n            blot.parent.removeChild(this);\n          }\n          this.insertBefore(blot, refBlot || undefined);\n        }\n      });\n    this.enforceAllowedChildren();\n  }\n}\n\nexport default ParentBlot;\n","import Attributor from '../attributor/attributor.js';\r\nimport AttributorStore from '../attributor/store.js';\r\nimport Scope from '../scope.js';\r\nimport type {\r\n  Blot,\r\n  BlotConstructor,\r\n  Formattable,\r\n  Parent,\r\n  Root,\r\n} from './abstract/blot.js';\r\nimport LeafBlot from './abstract/leaf.js';\r\nimport ParentBlot from './abstract/parent.js';\r\n\r\n// Shallow object comparison\r\nfunction isEqual(\r\n  obj1: Record<string, unknown>,\r\n  obj2: Record<string, unknown>,\r\n): boolean {\r\n  if (Object.keys(obj1).length !== Object.keys(obj2).length) {\r\n    return false;\r\n  }\r\n  for (const prop in obj1) {\r\n    if (obj1[prop] !== obj2[prop]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nclass InlineBlot extends ParentBlot implements Formattable {\r\n  public static allowedChildren: BlotConstructor[] = [InlineBlot, LeafBlot];\r\n  public static blotName = 'inline';\r\n  public static scope = Scope.INLINE_BLOT;\r\n  public static tagName: string | string[] = 'SPAN';\r\n\r\n  static create(value?: unknown) {\r\n    return super.create(value) as HTMLElement;\r\n  }\r\n\r\n  public static formats(domNode: HTMLElement, scroll: Root): any {\r\n    const match = scroll.query(InlineBlot.blotName);\r\n    if (\r\n      match != null &&\r\n      domNode.tagName === (match as BlotConstructor).tagName\r\n    ) {\r\n      return undefined;\r\n    } else if (typeof this.tagName === 'string') {\r\n      return true;\r\n    } else if (Array.isArray(this.tagName)) {\r\n      return domNode.tagName.toLowerCase();\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  protected attributes: AttributorStore;\r\n\r\n  constructor(scroll: Root, domNode: Node) {\r\n    super(scroll, domNode);\r\n    this.attributes = new AttributorStore(this.domNode);\r\n  }\r\n\r\n  public format(name: string, value: any): void {\r\n    if (name === this.statics.blotName && !value) {\r\n      this.children.forEach((child) => {\r\n        if (!(child instanceof InlineBlot)) {\r\n          child = child.wrap(InlineBlot.blotName, true);\r\n        }\r\n        this.attributes.copy(child as InlineBlot);\r\n      });\r\n      this.unwrap();\r\n    } else {\r\n      const format = this.scroll.query(name, Scope.INLINE);\r\n      if (format == null) {\r\n        return;\r\n      }\r\n      if (format instanceof Attributor) {\r\n        this.attributes.attribute(format, value);\r\n      } else if (\r\n        value &&\r\n        (name !== this.statics.blotName || this.formats()[name] !== value)\r\n      ) {\r\n        this.replaceWith(name, value);\r\n      }\r\n    }\r\n  }\r\n\r\n  public formats(): { [index: string]: any } {\r\n    const formats = this.attributes.values();\r\n    const format = this.statics.formats(this.domNode, this.scroll);\r\n    if (format != null) {\r\n      formats[this.statics.blotName] = format;\r\n    }\r\n    return formats;\r\n  }\r\n\r\n  public formatAt(\r\n    index: number,\r\n    length: number,\r\n    name: string,\r\n    value: any,\r\n  ): void {\r\n    if (\r\n      this.formats()[name] != null ||\r\n      this.scroll.query(name, Scope.ATTRIBUTE)\r\n    ) {\r\n      const blot = this.isolate(index, length) as InlineBlot;\r\n      blot.format(name, value);\r\n    } else {\r\n      super.formatAt(index, length, name, value);\r\n    }\r\n  }\r\n\r\n  public optimize(context: { [key: string]: any }): void {\r\n    super.optimize(context);\r\n    const formats = this.formats();\r\n    if (Object.keys(formats).length === 0) {\r\n      return this.unwrap(); // unformatted span\r\n    }\r\n    const next = this.next;\r\n    if (\r\n      next instanceof InlineBlot &&\r\n      next.prev === this &&\r\n      isEqual(formats, next.formats())\r\n    ) {\r\n      next.moveChildren(this);\r\n      next.remove();\r\n    }\r\n  }\r\n\r\n  public replaceWith(name: string | Blot, value?: any): Blot {\r\n    const replacement = super.replaceWith(name, value) as InlineBlot;\r\n    this.attributes.copy(replacement);\r\n    return replacement;\r\n  }\r\n\r\n  public update(\r\n    mutations: MutationRecord[],\r\n    context: { [key: string]: any },\r\n  ): void {\r\n    super.update(mutations, context);\r\n    const attributeChanged = mutations.some(\r\n      (mutation) =>\r\n        mutation.target === this.domNode && mutation.type === 'attributes',\r\n    );\r\n    if (attributeChanged) {\r\n      this.attributes.build();\r\n    }\r\n  }\r\n\r\n  public wrap(name: string | Parent, value?: any): Parent {\r\n    const wrapper = super.wrap(name, value);\r\n    if (wrapper instanceof InlineBlot) {\r\n      this.attributes.move(wrapper);\r\n    }\r\n    return wrapper;\r\n  }\r\n}\r\n\r\nexport default InlineBlot;\r\n","import Attributor from '../attributor/attributor.js';\r\nimport AttributorStore from '../attributor/store.js';\r\nimport Scope from '../scope.js';\r\nimport type {\r\n  Blot,\r\n  BlotConstructor,\r\n  Formattable,\r\n  Root,\r\n} from './abstract/blot.js';\r\nimport LeafBlot from './abstract/leaf.js';\r\nimport ParentBlot from './abstract/parent.js';\r\nimport InlineBlot from './inline.js';\r\n\r\nclass BlockBlot extends ParentBlot implements Formattable {\r\n  public static blotName = 'block';\r\n  public static scope = Scope.BLOCK_BLOT;\r\n  public static tagName: string | string[] = 'P';\r\n  public static allowedChildren: BlotConstructor[] = [\r\n    InlineBlot,\r\n    BlockBlot,\r\n    LeafBlot,\r\n  ];\r\n\r\n  static create(value?: unknown) {\r\n    return super.create(value) as HTMLElement;\r\n  }\r\n\r\n  public static formats(domNode: HTMLElement, scroll: Root): any {\r\n    const match = scroll.query(BlockBlot.blotName);\r\n    if (\r\n      match != null &&\r\n      domNode.tagName === (match as BlotConstructor).tagName\r\n    ) {\r\n      return undefined;\r\n    } else if (typeof this.tagName === 'string') {\r\n      return true;\r\n    } else if (Array.isArray(this.tagName)) {\r\n      return domNode.tagName.toLowerCase();\r\n    }\r\n  }\r\n\r\n  protected attributes: AttributorStore;\r\n\r\n  constructor(scroll: Root, domNode: Node) {\r\n    super(scroll, domNode);\r\n    this.attributes = new AttributorStore(this.domNode);\r\n  }\r\n\r\n  public format(name: string, value: any): void {\r\n    const format = this.scroll.query(name, Scope.BLOCK);\r\n    if (format == null) {\r\n      return;\r\n    } else if (format instanceof Attributor) {\r\n      this.attributes.attribute(format, value);\r\n    } else if (name === this.statics.blotName && !value) {\r\n      this.replaceWith(BlockBlot.blotName);\r\n    } else if (\r\n      value &&\r\n      (name !== this.statics.blotName || this.formats()[name] !== value)\r\n    ) {\r\n      this.replaceWith(name, value);\r\n    }\r\n  }\r\n\r\n  public formats(): { [index: string]: any } {\r\n    const formats = this.attributes.values();\r\n    const format = this.statics.formats(this.domNode, this.scroll);\r\n    if (format != null) {\r\n      formats[this.statics.blotName] = format;\r\n    }\r\n    return formats;\r\n  }\r\n\r\n  public formatAt(\r\n    index: number,\r\n    length: number,\r\n    name: string,\r\n    value: any,\r\n  ): void {\r\n    if (this.scroll.query(name, Scope.BLOCK) != null) {\r\n      this.format(name, value);\r\n    } else {\r\n      super.formatAt(index, length, name, value);\r\n    }\r\n  }\r\n\r\n  public insertAt(index: number, value: string, def?: any): void {\r\n    if (def == null || this.scroll.query(value, Scope.INLINE) != null) {\r\n      // Insert text or inline\r\n      super.insertAt(index, value, def);\r\n    } else {\r\n      const after = this.split(index);\r\n      if (after != null) {\r\n        const blot = this.scroll.create(value, def);\r\n        after.parent.insertBefore(blot, after);\r\n      } else {\r\n        throw new Error('Attempt to insertAt after block boundaries');\r\n      }\r\n    }\r\n  }\r\n\r\n  public replaceWith(name: string | Blot, value?: any): Blot {\r\n    const replacement = super.replaceWith(name, value) as BlockBlot;\r\n    this.attributes.copy(replacement);\r\n    return replacement;\r\n  }\r\n\r\n  public update(\r\n    mutations: MutationRecord[],\r\n    context: { [key: string]: any },\r\n  ): void {\r\n    super.update(mutations, context);\r\n    const attributeChanged = mutations.some(\r\n      (mutation) =>\r\n        mutation.target === this.domNode && mutation.type === 'attributes',\r\n    );\r\n    if (attributeChanged) {\r\n      this.attributes.build();\r\n    }\r\n  }\r\n}\r\n\r\nexport default BlockBlot;\r\n","import Scope from '../../scope.js';\r\nimport BlockBlot from '../block.js';\r\nimport ParentBlot from './parent.js';\r\n\r\nclass ContainerBlot extends ParentBlot {\r\n  public static blotName = 'container';\r\n  public static scope = Scope.BLOCK_BLOT;\r\n  public static tagName: string | string[];\r\n\r\n  public prev!: BlockBlot | ContainerBlot | null;\r\n  public next!: BlockBlot | ContainerBlot | null;\r\n\r\n  public checkMerge(): boolean {\r\n    return (\r\n      this.next !== null && this.next.statics.blotName === this.statics.blotName\r\n    );\r\n  }\r\n\r\n  public deleteAt(index: number, length: number): void {\r\n    super.deleteAt(index, length);\r\n    this.enforceAllowedChildren();\r\n  }\r\n\r\n  public formatAt(\r\n    index: number,\r\n    length: number,\r\n    name: string,\r\n    value: any,\r\n  ): void {\r\n    super.formatAt(index, length, name, value);\r\n    this.enforceAllowedChildren();\r\n  }\r\n\r\n  public insertAt(index: number, value: string, def?: any): void {\r\n    super.insertAt(index, value, def);\r\n    this.enforceAllowedChildren();\r\n  }\r\n\r\n  public optimize(context: { [key: string]: any }): void {\r\n    super.optimize(context);\r\n    if (this.children.length > 0 && this.next != null && this.checkMerge()) {\r\n      this.next.moveChildren(this);\r\n      this.next.remove();\r\n    }\r\n  }\r\n}\r\n\r\nexport default ContainerBlot;\r\n","import type { Formattable, Root } from './abstract/blot.js';\r\nimport LeafBlot from './abstract/leaf.js';\r\n\r\nclass EmbedBlot extends LeafBlot implements Formattable {\r\n  public static formats(_domNode: HTMLElement, _scroll: Root): any {\r\n    return undefined;\r\n  }\r\n\r\n  public format(name: string, value: any): void {\r\n    // super.formatAt wraps, which is what we want in general,\r\n    // but this allows subclasses to overwrite for formats\r\n    // that just apply to particular embeds\r\n    super.formatAt(0, this.length(), name, value);\r\n  }\r\n\r\n  public formatAt(\r\n    index: number,\r\n    length: number,\r\n    name: string,\r\n    value: any,\r\n  ): void {\r\n    if (index === 0 && length === this.length()) {\r\n      this.format(name, value);\r\n    } else {\r\n      super.formatAt(index, length, name, value);\r\n    }\r\n  }\r\n\r\n  public formats(): { [index: string]: any } {\r\n    return this.statics.formats(this.domNode, this.scroll);\r\n  }\r\n}\r\n\r\nexport default EmbedBlot;\r\n","import Registry, { type RegistryDefinition } from '../registry.js';\r\nimport Scope from '../scope.js';\r\nimport type { Blot, BlotConstructor, Root } from './abstract/blot.js';\r\nimport ContainerBlot from './abstract/container.js';\r\nimport ParentBlot from './abstract/parent.js';\r\nimport BlockBlot from './block.js';\r\n\r\nconst OBSERVER_CONFIG = {\r\n  attributes: true,\r\n  characterData: true,\r\n  characterDataOldValue: true,\r\n  childList: true,\r\n  subtree: true,\r\n};\r\n\r\nconst MAX_OPTIMIZE_ITERATIONS = 100;\r\n\r\nclass ScrollBlot extends ParentBlot implements Root {\r\n  public static blotName = 'scroll';\r\n  public static defaultChild = BlockBlot;\r\n  public static allowedChildren: BlotConstructor[] = [BlockBlot, ContainerBlot];\r\n  public static scope = Scope.BLOCK_BLOT;\r\n  public static tagName = 'DIV';\r\n\r\n  public observer: MutationObserver;\r\n\r\n  constructor(\r\n    public registry: Registry,\r\n    node: HTMLDivElement,\r\n  ) {\r\n    // @ts-expect-error scroll is the root with no parent\r\n    super(null, node);\r\n    this.scroll = this;\r\n    this.build();\r\n    this.observer = new MutationObserver((mutations: MutationRecord[]) => {\r\n      this.update(mutations);\r\n    });\r\n    this.observer.observe(this.domNode, OBSERVER_CONFIG);\r\n    this.attach();\r\n  }\r\n\r\n  public create(input: Node | string | Scope, value?: any): Blot {\r\n    return this.registry.create(this, input, value);\r\n  }\r\n\r\n  public find(node: Node | null, bubble = false): Blot | null {\r\n    const blot = this.registry.find(node, bubble);\r\n    if (!blot) {\r\n      return null;\r\n    }\r\n    if (blot.scroll === this) {\r\n      return blot;\r\n    }\r\n    return bubble ? this.find(blot.scroll.domNode.parentNode, true) : null;\r\n  }\r\n\r\n  public query(\r\n    query: string | Node | Scope,\r\n    scope: Scope = Scope.ANY,\r\n  ): RegistryDefinition | null {\r\n    return this.registry.query(query, scope);\r\n  }\r\n\r\n  public register(...definitions: RegistryDefinition[]) {\r\n    return this.registry.register(...definitions);\r\n  }\r\n\r\n  public build(): void {\r\n    if (this.scroll == null) {\r\n      return;\r\n    }\r\n    super.build();\r\n  }\r\n\r\n  public detach(): void {\r\n    super.detach();\r\n    this.observer.disconnect();\r\n  }\r\n\r\n  public deleteAt(index: number, length: number): void {\r\n    this.update();\r\n    if (index === 0 && length === this.length()) {\r\n      this.children.forEach((child) => {\r\n        child.remove();\r\n      });\r\n    } else {\r\n      super.deleteAt(index, length);\r\n    }\r\n  }\r\n\r\n  public formatAt(\r\n    index: number,\r\n    length: number,\r\n    name: string,\r\n    value: any,\r\n  ): void {\r\n    this.update();\r\n    super.formatAt(index, length, name, value);\r\n  }\r\n\r\n  public insertAt(index: number, value: string, def?: any): void {\r\n    this.update();\r\n    super.insertAt(index, value, def);\r\n  }\r\n\r\n  public optimize(context?: { [key: string]: any }): void;\r\n  public optimize(\r\n    mutations: MutationRecord[],\r\n    context: { [key: string]: any },\r\n  ): void;\r\n  public optimize(mutations: any = [], context: any = {}): void {\r\n    super.optimize(context);\r\n    const mutationsMap = context.mutationsMap || new WeakMap();\r\n    // We must modify mutations directly, cannot make copy and then modify\r\n    let records = Array.from(this.observer.takeRecords());\r\n    // Array.push currently seems to be implemented by a non-tail recursive function\r\n    // so we cannot just mutations.push.apply(mutations, this.observer.takeRecords());\r\n    while (records.length > 0) {\r\n      mutations.push(records.pop());\r\n    }\r\n    const mark = (blot: Blot | null, markParent = true): void => {\r\n      if (blot == null || blot === this) {\r\n        return;\r\n      }\r\n      if (blot.domNode.parentNode == null) {\r\n        return;\r\n      }\r\n      if (!mutationsMap.has(blot.domNode)) {\r\n        mutationsMap.set(blot.domNode, []);\r\n      }\r\n      if (markParent) {\r\n        mark(blot.parent);\r\n      }\r\n    };\r\n    const optimize = (blot: Blot): void => {\r\n      // Post-order traversal\r\n      if (!mutationsMap.has(blot.domNode)) {\r\n        return;\r\n      }\r\n      if (blot instanceof ParentBlot) {\r\n        blot.children.forEach(optimize);\r\n      }\r\n      mutationsMap.delete(blot.domNode);\r\n      blot.optimize(context);\r\n    };\r\n    let remaining = mutations;\r\n    for (let i = 0; remaining.length > 0; i += 1) {\r\n      if (i >= MAX_OPTIMIZE_ITERATIONS) {\r\n        throw new Error('[Parchment] Maximum optimize iterations reached');\r\n      }\r\n      remaining.forEach((mutation: MutationRecord) => {\r\n        const blot = this.find(mutation.target, true);\r\n        if (blot == null) {\r\n          return;\r\n        }\r\n        if (blot.domNode === mutation.target) {\r\n          if (mutation.type === 'childList') {\r\n            mark(this.find(mutation.previousSibling, false));\r\n            Array.from(mutation.addedNodes).forEach((node: Node) => {\r\n              const child = this.find(node, false);\r\n              mark(child, false);\r\n              if (child instanceof ParentBlot) {\r\n                child.children.forEach((grandChild: Blot) => {\r\n                  mark(grandChild, false);\r\n                });\r\n              }\r\n            });\r\n          } else if (mutation.type === 'attributes') {\r\n            mark(blot.prev);\r\n          }\r\n        }\r\n        mark(blot);\r\n      });\r\n      this.children.forEach(optimize);\r\n      remaining = Array.from(this.observer.takeRecords());\r\n      records = remaining.slice();\r\n      while (records.length > 0) {\r\n        mutations.push(records.pop());\r\n      }\r\n    }\r\n  }\r\n\r\n  public update(\r\n    mutations?: MutationRecord[],\r\n    context: { [key: string]: any } = {},\r\n  ): void {\r\n    mutations = mutations || this.observer.takeRecords();\r\n    const mutationsMap = new WeakMap();\r\n    mutations\r\n      .map((mutation: MutationRecord) => {\r\n        const blot = this.find(mutation.target, true);\r\n        if (blot == null) {\r\n          return null;\r\n        }\r\n        if (mutationsMap.has(blot.domNode)) {\r\n          mutationsMap.get(blot.domNode).push(mutation);\r\n          return null;\r\n        } else {\r\n          mutationsMap.set(blot.domNode, [mutation]);\r\n          return blot;\r\n        }\r\n      })\r\n      .forEach((blot: Blot | null) => {\r\n        if (blot != null && blot !== this && mutationsMap.has(blot.domNode)) {\r\n          blot.update(mutationsMap.get(blot.domNode) || [], context);\r\n        }\r\n      });\r\n    context.mutationsMap = mutationsMap;\r\n    if (mutationsMap.has(this.domNode)) {\r\n      super.update(mutationsMap.get(this.domNode), context);\r\n    }\r\n    this.optimize(mutations, context);\r\n  }\r\n}\r\n\r\nexport default ScrollBlot;\r\n","import Scope from '../scope.js';\r\nimport type { Blot, Leaf, Root } from './abstract/blot.js';\r\nimport LeafBlot from './abstract/leaf.js';\r\n\r\nclass TextBlot extends LeafBlot implements Leaf {\r\n  public static readonly blotName = 'text';\r\n  public static scope = Scope.INLINE_BLOT;\r\n\r\n  public static create(value: string): Text {\r\n    return document.createTextNode(value);\r\n  }\r\n\r\n  public static value(domNode: Text): string {\r\n    return domNode.data;\r\n  }\r\n\r\n  public domNode!: Text;\r\n  protected text: string;\r\n\r\n  constructor(scroll: Root, node: Node) {\r\n    super(scroll, node);\r\n    this.text = this.statics.value(this.domNode);\r\n  }\r\n\r\n  public deleteAt(index: number, length: number): void {\r\n    this.domNode.data = this.text =\r\n      this.text.slice(0, index) + this.text.slice(index + length);\r\n  }\r\n\r\n  public index(node: Node, offset: number): number {\r\n    if (this.domNode === node) {\r\n      return offset;\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  public insertAt(index: number, value: string, def?: any): void {\r\n    if (def == null) {\r\n      this.text = this.text.slice(0, index) + value + this.text.slice(index);\r\n      this.domNode.data = this.text;\r\n    } else {\r\n      super.insertAt(index, value, def);\r\n    }\r\n  }\r\n\r\n  public length(): number {\r\n    return this.text.length;\r\n  }\r\n\r\n  public optimize(context: { [key: string]: any }): void {\r\n    super.optimize(context);\r\n    this.text = this.statics.value(this.domNode);\r\n    if (this.text.length === 0) {\r\n      this.remove();\r\n    } else if (this.next instanceof TextBlot && this.next.prev === this) {\r\n      this.insertAt(this.length(), (this.next as TextBlot).value());\r\n      this.next.remove();\r\n    }\r\n  }\r\n\r\n  public position(index: number, _inclusive = false): [Node, number] {\r\n    return [this.domNode, index];\r\n  }\r\n\r\n  public split(index: number, force = false): Blot | null {\r\n    if (!force) {\r\n      if (index === 0) {\r\n        return this;\r\n      }\r\n      if (index === this.length()) {\r\n        return this.next;\r\n      }\r\n    }\r\n    const after = this.scroll.create(this.domNode.splitText(index));\r\n    this.parent.insertBefore(after, this.next || undefined);\r\n    this.text = this.statics.value(this.domNode);\r\n    return after;\r\n  }\r\n\r\n  public update(\r\n    mutations: MutationRecord[],\r\n    _context: { [key: string]: any },\r\n  ): void {\r\n    if (\r\n      mutations.some((mutation) => {\r\n        return (\r\n          mutation.type === 'characterData' && mutation.target === this.domNode\r\n        );\r\n      })\r\n    ) {\r\n      this.text = this.statics.value(this.domNode);\r\n    }\r\n  }\r\n\r\n  public value(): string {\r\n    return this.text;\r\n  }\r\n}\r\n\r\nexport default TextBlot;\r\n"],"names":["Scope","match","ClassAttributor","StyleAttributor","ParentBlot","AttributorStore","LeafBlot","InlineBlot","BlockBlot","ContainerBlot"],"mappings":"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"}